<?php

namespace App\Clasess;

use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Telegram\Bot\Api;
use Telegram\Bot\Objects\Update;
use Telegram\Bot\Objects\Message;
use Telegram\Bot\Objects\CallbackQuery;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Keyboard\InlineKeyboard;

class TelegramBotService
{
    protected $telegram;
    protected $botUsername;

    public function __construct()
    {
        // Initialize Telegram Bot API with token from .env
        $this->telegram = new Api('7601754928:AAEqLqnUp77UoFA3Cqg5FhtDrlGUiJMbQEs');

        // Get bot information
        $botInfo = $this->telegram->getMe();
        $this->botUsername = $botInfo->getUsername();
    }

    /**
     * Handle incoming webhook updates
     */
    public function handleWebhook(Update $update)
    {
        try {
            if ($update->getMessage()) {
                $this->handleMessage($update->getMessage());
            } elseif ($update->getCallbackQuery()) {
                $this->handleCallbackQuery($update->getCallbackQuery());
            } else {
                Log::info('Received unhandled update type: ' . $update->getType());
            }
        } catch (\Exception $e) {
            Log::error('Telegram Bot Error: ' . $e->getMessage());
            sleep(2); // Simulate delay as in original code
        }
    }

    /**
     * Handle incoming message
     */
    protected function handleMessage(Message $message)
    {
        $text = $message->text;

        if (!$text) {
            Log::info('Received message of type: ' . $message->type);
            return;
        }

        if (str_starts_with($text, '/')) {
            $this->handleCommand($message);
        } else {
            $this->handleTextMessage($message);
        }
    }

    /**
     * Handle text messages that are not commands
     */
    protected function handleTextMessage(Message $message)
    {
        $text = $message->text;
        Log::info("Received text '$text' in chat {$message->chat->id}");

        switch ($text) {
            case '–∫–∞–∫ –¥–µ–ª–∞':
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => '–í—Å—ë —Ö–æ—Ä–æ—à–æ!',
                    'parse_mode' => 'HTML',
                ]);
                break;
            default:
                $this->handleCommand($message, '/start', '');
                break;
        }
    }

    /**
     * Handle commands
     */
    protected function handleCommand(Message $message, string $command = null, string $args = null)
    {
        $text = $message->text;
        if (!$command) {
            $space = strpos($text, ' ') ?: strlen($text);
            $command = strtolower(substr($text, 0, $space));
            $args = trim(substr($text, $space));
        }

        // Check if command is addressed to this bot
        if (($at = strrpos($command, '@')) !== false) {
            $botName = substr($command, $at + 1);
            $command = substr($command, 0, $at);
            if (strcasecmp($botName, $this->botUsername) !== 0) {
                return;
            }
        }

        Log::info("Received command: $command $args");

        switch ($command) {
            case '/–∫–∞–∫_–¥–µ–ª–∞':
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => '–í—Å—ë —Ö–æ—Ä–æ—à–æ!',
                    'parse_mode' => 'HTML',
                ]);
                break;

            case '/hi':
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => 'üöÄ–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!',
                    'parse_mode' => 'HTML',
                ]);
                break;

            case '/start':
                $keyboard = Keyboard::make()->setResizeKeyboard(true)->row(
                    Keyboard::button('photo'),
                    Keyboard::button('audio'),
                    Keyboard::button('/bake'),
                    Keyboard::button('/–º–∞–≥–∞–∑–∏–Ω')
                );
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "<b><u>Bot menu</u></b>:\n/photo      - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ <i>(optionally from an <a href=\"https://picsum.photos/310/200.jpg\">url</a>)</i>\n/audio      - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ\n/bake       - –Ω–∞—á–∞–ª–æ —Å–∫–∞–∑–∫–∏\n/–º–∞–≥–∞–∑–∏–Ω       -–º–∞–≥–∞–∑–∏–Ω",
                    'parse_mode' => 'HTML',
                    'disable_web_page_preview' => false,
                    'reply_markup' => $keyboard,
                ]);
                break;

            case '/photo':
                if (str_starts_with($args, 'http')) {
                    $this->telegram->sendPhoto([
                        'chat_id' => $message->chat->id,
                        'photo' => $args,
                        'caption' => "Source: $args",
                    ]);
                } else {
                    $this->telegram->sendChatAction([
                        'chat_id' => $message->chat->id,
                        'action' => 'upload_photo',
                    ]);
                    sleep(2); // Simulate long task
                    $filePath = storage_path('app/public/bot.gif');
                    if (file_exists($filePath)) {
                        $this->telegram->sendPhoto([
                            'chat_id' => $message->chat->id,
                            'photo' => fopen($filePath, 'r'),
                            'caption' => 'Read https://telegrambots.github.io/book/',
                        ]);
                    } else {
                        $this->telegram->sendMessage([
                            'chat_id' => $message->chat->id,
                            'text' => '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start',
                        ]);
                    }
                }
                break;

            case '/–º–∞–≥–∞–∑–∏–Ω':
                Log::info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {$message->chat->id} –æ—Ç–∫—Ä—ã–ª –º–∞–≥–∞–∑–∏–Ω");
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(
                        InlineKeyboard::button('–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', url: 'https://example.com/shop'),
                        InlineKeyboard::button('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É', callbackData: '/start')
                    );

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ö–æ–ª–æ–±–∫–∞!  \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã:  \n<a href=\"https://example.com/shop\">–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω</a>",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                break;

            case '/bake':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(
                        InlineKeyboard::button('–£–±–µ–∂–∞—Ç—å', callbackData: '/run_or_stay_choice_run'),
                        InlineKeyboard::button('–û—Å—Ç–∞—Ç—å—Å—è', callbackData: '/run_or_stay_choice_stay')
                    )
                    ->row(
                        InlineKeyboard::button('–ú–∞–≥–∞–∑–∏–Ω –î–µ–¥–∞ –∏ –ë–∞–±–∫–∏', callbackData: '/–º–∞–≥–∞–∑–∏–Ω')
                    );

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ñ–∏–ª-–±—ã–ª —Å—Ç–∞—Ä–∏–∫ —Å–æ —Å—Ç–∞—Ä—É—Ö–æ–π. –û–Ω–∏ –∏—Å–ø–µ–∫–ª–∏ —Ä—É–º—è–Ω–æ–≥–æ –∫–æ–ª–æ–±–∫–∞!  \n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –∫–æ–ª–æ–±–∫—É?",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);

                $this->sendPhoto($message->chat->id, 'public/a/e3cc8fcf-99d4-4bd1-bc25-75b1918b3c62.jpg', '–ü—Ä–∏–≤–µ—Ç');
                break;

            case '/run_or_stay_choice_stay':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $this->telegram->sendMessage(['chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ —Ä–µ—à–∏–ª –æ—Å—Ç–∞—Ç—å—Å—è. –î–µ–¥ —Å –±–∞–±–∫–æ–π –æ–±—Ä–∞–¥–æ–≤–∞–ª–∏—Å—å, –Ω–æ –ø–æ—Ç–æ–º... —Å—ä–µ–ª–∏ –µ–≥–æ!  \n<b>–§–∏–Ω–∞–ª 1: –°—ä–µ–¥–µ–Ω –î–µ–¥–æ–º –∏ –ë–∞–±–∫–æ–π.</b>  \n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏ /bake",
                    'parse_mode' => 'HTML',
                ]);
                $this->sendPhoto($message->chat->id, 'public/a/e3cc8fcf-99d4-4bd1-bc25-75b1918b3c62.jpg', '–ü—Ä–∏–≤–µ—Ç');
                break;

            case '/run_or_stay_choice_run':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(
                        InlineKeyboard::button('–°–ø–µ—Ç—å –ø–µ—Å–µ–Ω–∫—É', callbackData: '/meet_rabbit_choice_sing'),
                        InlineKeyboard::button('–£–≥—Ä–æ–∂–∞—Ç—å', callbackData: '/meet_rabbit_choice_threaten')
                    )
                    ->row(
                        InlineKeyboard::button('–ú–∞–≥–∞–∑–∏–Ω –∑–∞–π—Ü–∞', callbackData: '/–º–∞–≥–∞–∑–∏–Ω')
                    );

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –ø–æ –¥–æ—Ä–æ–∂–∫–µ, –Ω–∞–ø–µ–≤–∞—è:  \n<i>\"–Ø –∫–æ–ª–æ–±–æ–∫, –∫–æ–ª–æ–±–æ–∫, –ø–æ –¥–æ—Ä–æ–∂–∫–µ —è –∏–¥—É, –æ—Ç –¥–µ–¥–∞, –æ—Ç –±–∞–±–∫–∏ —É–±–µ–≥—É!\"</i>  \n–í–¥—Ä—É–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –µ–º—É –ó–∞—è—Ü!  \n‚Äî –°—Ç–æ–π, –∫–æ–ª–æ–±–æ–∫, —Ö–æ—á—É —Ç–µ–±—è —Å—ä–µ—Å—Ç—å!  \n–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);

                $this->sendAudio($message->chat->id, 'public/a/kolobok.mp3', '—Ö–∞–π');
                $this->sendPhoto($message->chat->id, 'public/a/1c616baa-2b7d-4bf1-9e9a-783f596ee669.jpg', '–ü—Ä–∏–≤–µ—Ç');
                break;

            case '/meet_rabbit_choice_sing':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(InlineKeyboard::button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: '/meet_wolf'));

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ –∑–∞–ø–µ–ª —Å–≤–æ—é –ø–µ—Å–µ–Ω–∫—É. –ó–∞—è—Ü –∑–∞—Å–º–µ—è–ª—Å—è:  \n‚Äî –õ–∞–¥–Ω–æ, –∫–∞—Ç–∞–π—Å—è –¥–∞–ª—å—à–µ, –≤–µ—Å—ë–ª—ã–π —Ç—ã!  \n–ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –¥–∞–ª—å—à–µ.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                break;

            case '/meet_rabbit_choice_threaten':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(InlineKeyboard::button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: '/meet_wolf'));

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "‚Äî –ê –Ω–µ —Ç–æ —è —Ç–µ–±—è –ø–æ–±—å—é! ‚Äî —Å–∫–∞–∑–∞–ª –∫–æ–ª–æ–±–æ–∫.  \n–ó–∞—è—Ü —É–¥–∏–≤–∏–ª—Å—è, —Ñ—ã—Ä–∫–Ω—É–ª –∏ —É—Å–∫–∞–∫–∞–ª –ø—Ä–æ—á—å.  \n–ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –¥–∞–ª—å—à–µ.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                break;

            case '/meet_wolf':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(
                        InlineKeyboard::button('–°–ø–µ—Ç—å –ø–µ—Å–µ–Ω–∫—É', callbackData: '/meet_wolf_choice_sing'),
                        InlineKeyboard::button('–°–ø—Ä—è—Ç–∞—Ç—å—Å—è', callbackData: '/meet_wolf_choice_hide')
                    )
                    ->row(
                        InlineKeyboard::button('–ú–∞–≥–∞–∑–∏–Ω –≤–æ–ª–∫–∞', callbackData: '/–º–∞–≥–∞–∑–∏–Ω')
                    );

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,'text' => "–ò–∑ –∫—É—Å—Ç–æ–≤ –≤—ã—Å–∫–æ—á–∏–ª –í–æ–ª–∫:  \n‚Äî –û–≥–æ, –≤–∫—É—Å–Ω—ã–π –∫–æ–ª–æ–±–æ–∫!  \n–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                $this->sendPhoto($message->chat->id, 'public/a/photo_5208688783720049056_x.jpg', '–ü—Ä–∏–≤–µ—Ç');
                break;

            case '/meet_wolf_choice_sing':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(InlineKeyboard::button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: '/meet_bear'));

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ –∑–∞–ø–µ–ª. –í–æ–ª–∫ –∑–∞—É–ª—ã–±–∞–ª—Å—è:  \n‚Äî –•–æ—Ä–æ—à–∞—è –ø–µ—Å–Ω—è, –∫–∞—Ç–∞–π—Å—è –¥–∞–ª—å—à–µ!  \n–ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –¥–∞–ª—å—à–µ.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                $this->sendAudio($message->chat->id, 'public/a/wolf.mp3', '–∫—Ö–º-–∫—Ö–º, –¥–∞—Ä–æ–≤!');
                break;

            case '/meet_wolf_choice_hide':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(InlineKeyboard::button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: '/meet_bear'));

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ —é—Ä–∫–Ω—É–ª –≤ —Ç—Ä–∞–≤—É –∏ –∑–∞—Ç–∞–∏–ª—Å—è. –í–æ–ª–∫ –Ω–µ –Ω–∞—à—ë–ª –µ–≥–æ –∏ —É—à—ë–ª.  \n–ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –¥–∞–ª—å—à–µ.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                break;

            case '/meet_bear':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(
                        InlineKeyboard::button('–ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è', callbackData: '/meet_bear_choice_boast'),
                        InlineKeyboard::button('–£–≥–æ—Å—Ç–∏—Ç—å –ø–∏—Ä–æ–≥–æ–º', callbackData: '/meet_bear_choice_treat')
                    )
                    ->row(
                        InlineKeyboard::button('–ú–∞–≥–∞–∑–∏–Ω –º–µ–¥–≤–µ–¥—è', callbackData: '/–º–∞–≥–∞–∑–∏–Ω')
                    );

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ù–∞ –ø—É—Ç–∏ –ø–æ—è–≤–∏–ª—Å—è –ú–µ–¥–≤–µ–¥—å:  \n‚Äî –ö—Ç–æ —ç—Ç–æ –∫–∞—Ç–∏—Ç—Å—è? –•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!  \n–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                $this->sendPhoto($message->chat->id, 'public/a/5717e477-db54-4f81-a508-0910f4c5614d.jpg', '–ü—Ä–∏–≤–µ—Ç');
                $this->sendAudio($message->chat->id, 'public/a/bear.wav', '–π–æ—É-–π–æ—É! –≥–æ —Ä–µ–ø—á–∏–∫—Å');
                break;

            case '/meet_bear_choice_boast':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(InlineKeyboard::button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: '/meet_fox'));

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "‚Äî –Ø —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ —É–º–Ω—ã–π –∫–æ–ª–æ–±–æ–∫! –ù–∏–∫—Ç–æ –º–µ–Ω—è –Ω–µ –ø–æ–π–º–∞–µ—Ç! ‚Äî —Å–∫–∞–∑–∞–ª –∫–æ–ª–æ–±–æ–∫.  \n–ú–µ–¥–≤–µ–¥—å –±—É—Ä–∫–Ω—É–ª:  \n‚Äî –ù—É, —Ä–∞–∑ —Ç–∞–∫–æ–π –∫—Ä—É—Ç–æ–π, –∫–∞—Ç–∞–π—Å—è! ‚Äî –∏ —É—à—ë–ª.  \n–ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –¥–∞–ª—å—à–µ.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                break;

            case '/meet_bear_choice_treat':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(InlineKeyboard::button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: '/meet_fox'));

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª:  \n‚Äî –î–∞–≤–∞–π –ø–æ–¥–µ–ª—é—Å—å –∫—É—Å–æ—á–∫–æ–º –Ω–∞—á–∏–Ω–∫–∏!  \n–ú–µ–¥–≤–µ–¥—å –æ–±—Ä–∞–¥–æ–≤–∞–ª—Å—è:  \n‚Äî –í–æ—Ç —ç—Ç–æ –¥–∞! –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å!  \n–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –¥—Ä—É–∑—å—è. –ö–æ–ª–æ–±–æ–∫ –ø–æ–∫–∞—Ç–∏–ª—Å—è –¥–∞–ª—å—à–µ.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                break;

            case '/meet_fox':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $inlineKeyboard = InlineKeyboard::make()
                    ->row(
                        InlineKeyboard::button('–°–ø–µ—Ç—å –ø–µ—Å–µ–Ω–∫—É', callbackData: '/meet_fox_choice_sing'),
                        InlineKeyboard::button('–°–±–µ–∂–∞—Ç—å', callbackData: '/meet_fox_choice_run'),
                        InlineKeyboard::button('–î–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', callbackData: '/meet_fox_choice_interview')
                    )
                    ->row(
                        InlineKeyboard::button('–ú–∞–≥–∞–∑–∏–Ω –ª–∏—Å—ã', callbackData: '/–º–∞–≥–∞–∑–∏–Ω')
                    );

                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ –≤—Å—Ç—Ä–µ—Ç–∏–ª –õ–∏—Å—É. –û–Ω–∞ –º–∏–ª–æ —É–ª—ã–±–Ω—É–ª–∞—Å—å:  \n‚Äî –û–π, –∫–∞–∫–æ–π —Å–ª–∞–≤–Ω—ã–π –∫–æ–ª–æ–±–æ–∫! –°–ø–æ–π –º–Ω–µ –ø–µ—Å–µ–Ω–∫—É!  \n–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $inlineKeyboard,
                ]);
                $this->sendAudio($message->chat->id, 'public/a/lisa.wav', '–º–º–º–º, –∫–∞–∫–æ–π —Ç—ã');
                $this->sendPhoto($message->chat->id, 'public/a/501e8981-3cf1-4243-a802-e8ade6e35ad7.jpg', '–ü—Ä–∏–≤–µ—Ç');
                break;

            case '/meet_fox_choice_sing':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ –∑–∞–ø–µ–ª. –õ–∏—Å–∞ —Å–ª—É—à–∞–ª–∞, –∞ –ø–æ—Ç–æ–º... —Å—Ö–≤–∞—Ç–∏–ª–∞ –µ–≥–æ!  \n<b>–§–∏–Ω–∞–ª 2: –õ–∏—Å–∞ —Å—ä–µ–¥–∞–µ—Ç.</b>  \n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏ /bake",
                    'parse_mode' => 'HTML',
                ]);
                break;

            case '/meet_fox_choice_run':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–ö–æ–ª–æ–±–æ–∫ —Ä–≤–∞–Ω—É–ª –≤ —Å—Ç–æ—Ä–æ–Ω—É –∏ —É–∫–∞—Ç–∏–ª—Å—è –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –õ–∏—Å–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∏ —Å —á–µ–º.  \n<b>–§–∏–Ω–∞–ª 3: –£—Ö–æ–¥–∏—Ç –≤ –ª–µ—Å.</b>  \n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏ /bake",
                    'parse_mode' => 'HTML',
                ]);
                break;

            case '/meet_fox_choice_interview':
                $this->telegram->sendChatAction([
                    'chat_id' => $message->chat->id,
                    'action' => 'typing',
                ]);
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "‚Äî –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –º–æ—é –∏—Å—Ç–æ—Ä–∏—é? ‚Äî —Å–∫–∞–∑–∞–ª –∫–æ–ª–æ–±–æ–∫.  \n–õ–∏—Å–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å. –í–∏–¥–µ–æ —Å—Ç–∞–ª–æ –≤–∏—Ä—É—Å–Ω—ã–º!  \n<b>–§–∏–Ω–∞–ª 4: –ö–æ–ª–æ–±–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–ª–æ–≥–µ—Ä–æ–º.</b>  \n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏ /bake",
                    'parse_mode' => 'HTML',
                ]);
                $this->sendPhoto($message->chat->id, 'public/a/9b18bee8-8f14-4d44-8b5d-047828ae300f.jpg', '–•–∞–π');
                break;

            default:
                $this->telegram->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => "–Ø –±–æ—Ç-—Å–∫–∞–∑–∫–∞ –ø—Ä–æ –ö–æ–ª–æ–±–∫–∞!  \n–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /bake, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!",'parse_mode' => 'HTML',
                ]);
                break;
        }
    }

    /**
     * Handle callback queries
     */
    protected function handleCallbackQuery(CallbackQuery $callbackQuery)
    {
        $this->telegram->answerCallbackQuery([
            'callback_query_id' => $callbackQuery->id,
            'text' => "You selected {$callbackQuery->data}",
        ]);

        $this->handleCommand($callbackQuery->message, $callbackQuery->data, '');
    }

    /**
     * Send photo to chat
     */
    protected function sendPhoto(int $chatId, string $path, string $caption)
    {
        $filePath = storage_path("app/$path");
        if (file_exists($filePath)) {
            $this->telegram->sendChatAction([
                'chat_id' => $chatId,
                'action' => 'upload_photo',
            ]);
            $this->telegram->sendPhoto([
                'chat_id' => $chatId,
                'photo' => fopen($filePath, 'r'),
                'caption' => $caption,
                'parse_mode' => 'HTML',
            ]);
        } else {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start',
                'parse_mode' => 'HTML',
            ]);
        }
    }

    /**
     * Send audio to chat
     */
    protected function sendAudio(int $chatId, string $path, string $caption)
    {
        $filePath = storage_path("app/$path");
        if (file_exists($filePath)) {
            $this->telegram->sendChatAction([
                'chat_id' => $chatId,
                'action' => 'upload_audio',
            ]);
            $this->telegram->sendAudio([
                'chat_id' => $chatId,
                'audio' => fopen($filePath, 'r'),
                'caption' => $caption,
                'title' => $caption,
                'parse_mode' => 'HTML',
            ]);
        } else {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start',
                'parse_mode' => 'HTML',
            ]);
        }
    }

    /**
     * Send invoice for shop
     */
    protected function sendGrandparentsShop(int $chatId)
    {
        $this->telegram->sendInvoice([
            'chat_id' => $chatId,
            'title' => '–ú–∞–≥–∞–∑–∏–Ω –î–µ–¥–∞ –∏ –ë–∞–±–∫–∏',
            'description' => '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ö–æ–ª–æ–±–∫–∞!',
            'payload' => 'grandparents_shop',
            'provider_token' => env('TELEGRAM_PAYMENT_PROVIDER_TOKEN'),
            'currency' => 'RUB',
            'photo_url' => 'https://picsum.photos/512/512?random=1',
            'photo_size' => 512,
            'photo_width' => 512,
            'photo_height' => 512,
            'prices' => [
                ['label' => '–ú—É–∫–∞ –¥–ª—è –∫–æ–ª–æ–±–∫–æ–≤', 'amount' => 500],
                ['label' => '–†–µ—Ü–µ–ø—Ç –∫–æ–ª–æ–±–∫–∞', 'amount' => 1000],
                ['label' => '–ü–µ—á–∫–∞ –¥–ª—è –≤—ã–ø–µ—á–∫–∏', 'amount' => 5000],
            ],
            'need_name' => true,
            'need_email' => true,
            'need_phone_number' => true,
            'is_flexible' => true,
            'reply_markup' => InlineKeyboard::make()->row(
                InlineKeyboard::button('–û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://example.com/payment')
            ),
        ]);

        Log::info('–ò–Ω–≤–æ–π—Å –º–∞–≥–∞–∑–∏–Ω–∞ –î–µ–¥–∞ –∏ –ë–∞–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
    }
}
